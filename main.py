import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.utils import markdown
from aiogram.enums import ParseMode
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from utils.utils import find_birthdays

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = '8178973869:AAHP6jnoiNcRRlrIKKYQrf2J5dqGxnfD9xg'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone='Europe/Moscow')

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"


@dp.message(CommandStart())
async def process_start_command(message: Message):
    # scheduler.add_job(send_birthday_cron, trigger='cron', hour=21, minute=57, start_date=datetime.now(),
    #                  kwargs={'bot': bot, 'user_id': -1001719812219})
    # scheduler.start()
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n'
        '–û—Ç–ø—Ä–∞–≤—å /birthday, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'
    )


async def send_birthday_cron(bot: Bot, user_id: int):
    birthdays_today, anniversary_today = find_birthdays()
    result = ""

    if len(birthdays_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {'–æ—Ç–º–µ—á–∞—é—Ç –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–≥–∏' if len(
            birthdays_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ–ª–ª–µ–≥–∞'} üéÇ:\n\n"
        for item in birthdays_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")
    if len(anniversary_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è {'–æ—Ç–º–µ—á–∞—é—Ç —é–±–∏–ª–µ–π –Ω–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏' if len(
            anniversary_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç —é–±–∏–ª–µ–π –Ω–∞—à –∫–æ–ª–ª–µ–≥–∞'} üéâ:\n\n"
        for item in anniversary_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")

    if len(result) > 0:
        await bot.send_message(chat_id=user_id, text=result, parse_mode=ParseMode.HTML)


@dp.message(Command("birthday"))
async def process_birthday_command(message: Message):
    birthdays_today, anniversary_today = find_birthdays()
    result = ""

    if len(birthdays_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {'–æ—Ç–º–µ—á–∞—é—Ç –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–≥–∏' if len(
            birthdays_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ–ª–ª–µ–≥–∞'} üéÇ:\n\n"
        for item in birthdays_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")
    if len(anniversary_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è {'–æ—Ç–º–µ—á–∞—é—Ç —é–±–∏–ª–µ–π –Ω–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏' if len(
            anniversary_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç —é–±–∏–ª–µ–π –Ω–∞—à –∫–æ–ª–ª–µ–≥–∞'} üéâ:\n\n"
        for item in anniversary_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")

    if len(result) > 0:
        await message.answer(result, parse_mode=ParseMode.HTML)
    else:
        await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π', parse_mode=ParseMode.HTML)


async def set_scheduler():
    scheduler.add_job(send_birthday_cron, trigger='cron', hour=9, minute=5, start_date=datetime.now(),
                      kwargs={'bot': bot, 'user_id': -1001719812219})
    scheduler.start()


async def main():
    # logging.basicConfig(level=logging.INFO)
    scheduler_task = asyncio.create_task(
        set_scheduler())  # —Å–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    try:
        await dp.start_polling(bot)
    finally:
        scheduler_task.cancel()  # —Å–∏–≥–Ω–∞–ª–∏–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        try:
            await scheduler_task  # –¥–∞—ë–º —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —à–∞–Ω—Å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        except asyncio.CancelledError:
            pass  # –µ—Å–ª–∏ –≤—Å—ë –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ –Ω–∞–¥–æ, —Ç–æ await –≤—ã–∫–∏–Ω–µ—Ç CancelledError

if __name__ == '__main__':
    asyncio.run(main())
    # dp.run_polling(bot)
