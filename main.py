import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils import markdown
from aiogram.enums import ParseMode
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from environs import Env

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config_data.config import Config, load_config

from utils.utils import find_birthdays, find_contacts

router = Router()
# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é config
config: Config = load_config()

bot = Bot(token=config.tg_bot.token)

# env = Env()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Env
# env.read_env()  # –ú–µ—Ç–æ–¥–æ–º read_env() —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª .env –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

# BOT_TOKEN = env('BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone='Europe/Moscow')

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"


@dp.message(CommandStart())
async def process_start_command(message: Message):
    # scheduler.add_job(send_birthday_cron, trigger='cron', hour=21, minute=57, start_date=datetime.now(),
    #                  kwargs={'bot': bot, 'user_id': -1001719812219})
    # scheduler.start()
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n'
        '–û—Ç–ø—Ä–∞–≤—å /birthday, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ'
    )


async def send_birthday_cron(bot: Bot, user_id: int):
    birthdays_today, anniversary_today = find_birthdays()
    result = ""

    if len(birthdays_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {'–æ—Ç–º–µ—á–∞—é—Ç –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–≥–∏' if len(
            birthdays_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ–ª–ª–µ–≥–∞'} üéÇ:\n\n"
        for item in birthdays_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")
    if len(anniversary_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è {'–æ—Ç–º–µ—á–∞—é—Ç —é–±–∏–ª–µ–π –Ω–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏' if len(
            anniversary_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç —é–±–∏–ª–µ–π –Ω–∞—à –∫–æ–ª–ª–µ–≥–∞'} üéâ:\n\n"
        for item in anniversary_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")

    if len(result) > 0:
        await bot.send_message(chat_id=user_id, text=result, parse_mode=ParseMode.HTML)


@dp.message(Command("birthday"))
async def process_birthday_command(message: Message):
    birthdays_today, anniversary_today = find_birthdays()
    result = ""

    if len(birthdays_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {'–æ—Ç–º–µ—á–∞—é—Ç –Ω–∞—à–∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–≥–∏' if len(
            birthdays_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ–ª–ª–µ–≥–∞'} üéÇ:\n\n"
        for item in birthdays_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")
    if len(anniversary_today) > 0:
        result += f"–°–µ–≥–æ–¥–Ω—è {'–æ—Ç–º–µ—á–∞—é—Ç —é–±–∏–ª–µ–π –Ω–∞—à–∏ –∫–æ–ª–ª–µ–≥–∏' if len(
            anniversary_today) > 1 else '–æ—Ç–º–µ—á–∞–µ—Ç —é–±–∏–ª–µ–π –Ω–∞—à –∫–æ–ª–ª–µ–≥–∞'} üéâ:\n\n"
        for item in anniversary_today:
            result += markdown.text(
                f"üî∏ <b>{item['name']}</b>\n         <i>{item['position']}</i>\n\n")

    if len(result) > 0:
        await message.answer(result, parse_mode=ParseMode.HTML)
    else:
        await message.answer('–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π', parse_mode=ParseMode.HTML)


@dp.message(Command("find_contacts"))
async def process_birthday_command(message: Message, command: CommandObject):
    find_str = command.args.split()
    result = find_contacts(find_str[0])

    await message.answer('–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', reply_markup=kb_names(result))


def kb_names(names):
    keyboard = InlineKeyboardBuilder()

    for name in names:
        keyboard.row(InlineKeyboardButton(
            text=f"{name}", callback_data=f"name_{name.replace(" ", "_")}"))

    return keyboard.as_markup()


@dp.callback_query(F.data.startswith('name_'))
async def get_contact(callback: CallbackQuery):
    name = callback.data.split('_')[1].replace("_", " ")
    await callback.message.answer(f'name')


async def set_scheduler():
    scheduler.add_job(send_birthday_cron, trigger='cron', hour=9, minute=5, start_date=datetime.now(),
                      kwargs={'bot': bot, 'user_id': -1001719812219})
    scheduler.start()


async def main():
    # logging.basicConfig(level=logging.INFO)

    scheduler_task = asyncio.create_task(
        set_scheduler())  # —Å–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    try:
        await dp.start_polling(bot)
    finally:
        scheduler_task.cancel()  # —Å–∏–≥–Ω–∞–ª–∏–º –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        try:
            await scheduler_task  # –¥–∞—ë–º —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ —à–∞–Ω—Å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏–≥–Ω–∞–ª –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        except asyncio.CancelledError:
            pass  # –µ—Å–ª–∏ –≤—Å—ë –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ –Ω–∞–¥–æ, —Ç–æ await –≤—ã–∫–∏–Ω–µ—Ç CancelledError

if __name__ == '__main__':
    asyncio.run(main())
    # dp.include_router(router)
    # dp.run_polling(bot)
